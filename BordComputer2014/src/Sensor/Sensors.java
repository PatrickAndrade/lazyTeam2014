package Sensor;

import Computer.BordComputer;

/**
 * TODO: Comment this class
 * 
 * @author Gregory Maitre & Patrick Andrade
 * 
 */
public class Sensors implements Runnable {

	private BordComputer bordComputer;
	private double wheelRadius = 0.38; // Let's suppose that a wheel's radius
										// is approximatively 38cm

	public Sensors(BordComputer bordComputer) {
		this.bordComputer = bordComputer;
	}

	private void waitOneSecond() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
		}
	}

	public void run() {

		double injection = 1.0;
		double volume = 45.0;
		int latIndex = 0;
		int longIndex = 0;
		double speed = 0.0;

		while (true) {

			// position:
			if ((latIndex >= latitude.length)
					|| (longIndex >= longitude.length)) {
				latIndex = 0;
				longIndex = 0;
			}

			if ((latIndex + 1 < latitude.length)
					|| (longIndex + 1 < longitude.length)) {
				speed = latitudeLongitudeToDistance(latitude[latIndex],
						longitude[longIndex], latitude[latIndex + 1],
						longitude[longIndex + 1]);
			}

			bordComputer.computePosition(latitude[latIndex],
					longitude[longIndex]);

			latIndex++;
			longIndex++;

			// Hall effect
			bordComputer.computeInstantaneousSpeed(speed / wheelRadius);

			// injection
			bordComputer.computeInstantaneousConsumption(injection);

			// volume:
			bordComputer.computeEssenceVolumeDisponible(volume);

			if (volume - injection >= 0) {
				volume -= injection / 1000;
			}

			waitOneSecond();
		}
	}

	private double latitudeLongitudeToDistance(double lastLatitude,
			double lastLongitude, double latitude, double longitude) {
		double R = 6371 * 1000; // rayon de la Terre

		double dLat = Math.toRadians(latitude - lastLatitude);
		double dLon = Math.toRadians(longitude - lastLongitude);
		double lat1 = Math.toRadians(lastLatitude);
		double lat2 = Math.toRadians(latitude);

		// Haversine formula
		double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2)
				* Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
		double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
		return R * c;
	}

	double latitude[] = { 46.51679282, 46.51678463, 46.51671324, 46.51672899,
			46.516795, 46.51680875, 46.5168398, 46.51686503, 46.51687517,
			46.51689075, 46.51691765, 46.51694997, 46.51697264, 46.51698516,
			46.51700766, 46.51702156, 46.51704036, 46.51705651, 46.51706525,
			46.51707914, 46.51709229, 46.51711398, 46.51712776, 46.51714662,
			46.51716699, 46.51718705, 46.51721059, 46.5172227, 46.51724313,
			46.51726343, 46.51727457, 46.51729105, 46.51730191, 46.51731317,
			46.51732124, 46.51735037, 46.51735635, 46.51736253, 46.51735578,
			46.51736761, 46.51738469, 46.51741889, 46.51745607, 46.51749745,
			46.51752453, 46.51755587, 46.51758778, 46.51762208, 46.51765583,
			46.5176921, 46.51772893, 46.51776448, 46.51779604, 46.51783767,
			46.51787383, 46.51791266, 46.51794471, 46.51797726, 46.51798978,
			46.51804369, 46.5181047, 46.51815838, 46.51821908, 46.51826436,
			46.51830777, 46.51835148, 46.51839218, 46.51843467, 46.51847096,
			46.51851049, 46.51855078, 46.51858822, 46.51863671, 46.51868659,
			46.51873815, 46.51878509, 46.51882911, 46.51887888, 46.51892071,
			46.51897805, 46.51902932, 46.51908638, 46.51913601, 46.51918965,
			46.51924887, 46.51929491, 46.51934747, 46.51939657, 46.51944596,
			46.51949242, 46.51953752, 46.51957581, 46.51962005, 46.5196536,
			46.51969703, 46.51973846, 46.51976589, 46.51979913, 46.51983873,
			46.51987586, 46.51990332, 46.51993509, 46.51996461, 46.51999578,
			46.52003079, 46.52006367, 46.52009815, 46.52012987, 46.52015776,
			46.52018808, 46.52022522, 46.52025864, 46.52029166, 46.52033841,
			46.52037476, 46.52040616, 46.52044082, 46.52047991, 46.52051875,
			46.52055158, 46.52058315, 46.5206057, 46.52061923, 46.5206292,
			46.52067223, 46.52072343, 46.52076019, 46.52080247, 46.52084737,
			46.52089281, 46.52094256, 46.52099619, 46.52106105, 46.52112774,
			46.52119435, 46.52126781, 46.52133415, 46.52141154, 46.52147741,
			46.52154517, 46.5216244, 46.52169278, 46.52176543, 46.52183115,
			46.52189989, 46.52197094, 46.52204113, 46.52211488, 46.52219262,
			46.52226228, 46.52234137, 46.52241129, 46.52247733, 46.52253725,
			46.52258954, 46.52264195, 46.52269973, 46.52276002, 46.52282513,
			46.52288417, 46.52294887, 46.5230115, 46.52306738, 46.52312444,
			46.52317984, 46.52323674, 46.5232874, 46.52333585, 46.52338148,
			46.52342631, 46.52347951, 46.52353091, 46.52358327, 46.52362752,
			46.52365693, 46.52367246, 46.52365041, 46.52361091, 46.52357162,
			46.52352434, 46.52347839, 46.523431, 46.52337862, 46.52332212,
			46.5232648, 46.52321291, 46.52315228, 46.52309192, 46.52303941,
			46.52298126, 46.5229197, 46.52285733, 46.52278944, 46.52272309,
			46.52265334, 46.52258746, 46.52252154, 46.52246128, 46.52240133,
			46.52233576, 46.52227422, 46.52220842, 46.52214009, 46.52207177,
			46.52200519, 46.5219359, 46.52186661, 46.52178273, 46.52170215,
			46.52161811, 46.52153441, 46.52145189, 46.52136325, 46.52127453,
			46.52118627, 46.52109911, 46.52100769, 46.52092018, 46.52083233,
			46.52074778, 46.52066369, 46.52057377, 46.5204883, 46.52041155,
			46.5203288, 46.52025272, 46.52017359, 46.52010014, 46.52003043,
			46.51996386, 46.51989339, 46.51983139, 46.51976057, 46.51970976,
			46.51965516, 46.51958605, 46.51951628, 46.51945599, 46.51938773,
			46.51932132, 46.51925212, 46.51917648, 46.51909949, 46.51901966,
			46.51893922, 46.51886306, 46.51878755, 46.51871123, 46.51863749,
			46.5185636, 46.51849712, 46.51842647, 46.51835264, 46.5182806,
			46.51821104, 46.51815124, 46.51808865, 46.51803642, 46.51797062,
			46.51793079, 46.51788988, 46.51785167, 46.51781959, 46.51778919,
			46.51777024, 46.5177477, 46.51772685, 46.51765985, 46.51762529,
			46.51756769, 46.51750218, 46.51744754, 46.51738081, 46.51729989,
			46.51719715, 46.51708437, 46.51696639, 46.51684977, 46.5167307,
			46.51662997, 46.51653901, 46.51647157, 46.51642383, 46.51638673,
			46.51641191, 46.51643422, 46.51648017, 46.51654686, 46.51662786,
			46.51671589, 46.51678798, 46.5168668, 46.51692526, 46.5169649,
			46.51697442, 46.51697156, 46.51695842, 46.51694417, 46.51692513,
			46.51692013, 46.51690081, 46.51689689, 46.51689175, 46.51689532,
			46.51690082, 46.51691432, 46.51690566, 46.51689092, 46.51688067,
			46.51687624, 46.51686691, 46.51686686, 46.51685993, 46.51687306,
			46.51687015, 46.51685995, 46.51685838, 46.51685658, 46.51684795,
			46.51685073, 46.51685794, 46.51686519, 46.51686506, 46.51686639,
			46.51686803, 46.51686831, 46.51686632, 46.51687007, 46.51687141,
			46.51687323, 46.51687331, 46.51687279, 46.51687606, 46.51687439,
			46.51687729, 46.51687829, 46.51687841, 46.51688008, 46.51688005,
			46.5168806, 46.51688085, 46.51688096, 46.51688122, 46.51688142,
			46.51688157, 46.51688166, 46.51688173, 46.51688178, 46.51688254,
			46.51688276, 46.5168862, 46.5168801, 46.51688116, 46.51687567,
			46.51687224, 46.51686076, 46.51685304, 46.51685164, 46.51682999,
			46.51680695, 46.51676908, 46.51673037, 46.51668934, 46.51663356,
			46.51658221, 46.51652918, 46.51648232, 46.51644484, 46.51641202,
			46.51637066, 46.51635162, 46.51631666, 46.5163032, 46.51628939,
			46.51627458, 46.51628208, 46.51631443, 46.51632216, 46.51632941,
			46.51632879, 46.51633032, 46.51633128, };

	double longitude[] = { 6.56550135, 6.56550127, 6.56560467, 6.56560947,
			6.56561136, 6.56561921, 6.56563921, 6.56563472, 6.56563343,
			6.56565176, 6.56567701, 6.5657202, 6.56577397, 6.56584192,
			6.56593544, 6.56603933, 6.56616556, 6.56629807, 6.56643027,
			6.56656922, 6.56672056, 6.56687991, 6.56705675, 6.56722101,
			6.56738965, 6.56756093, 6.56773557, 6.56792143, 6.56810331,
			6.56828987, 6.56847587, 6.56865347, 6.56882691, 6.56898882,
			6.56914601, 6.5692654, 6.56939917, 6.56952214, 6.56963844,
			6.56974384, 6.56986137, 6.56998827, 6.57012124, 6.57024852,
			6.57038438, 6.57052501, 6.57066943, 6.57082079, 6.57097504,
			6.5711305, 6.57128552, 6.57144136, 6.57159832, 6.57173933,
			6.57187347, 6.57199893, 6.5721267, 6.57227255, 6.57237964,
			6.57245931, 6.57255296, 6.57267394, 6.57278828, 6.57292582,
			6.57306858, 6.57322241, 6.57337693, 6.57353502, 6.57369669,
			6.5738565, 6.57402329, 6.57419259, 6.5743466, 6.57450951,
			6.5746793, 6.57485184, 6.57502483, 6.57519948, 6.57539697,
			6.57557018, 6.57574594, 6.57591801, 6.57610498, 6.57628532,
			6.57646846, 6.57665756, 6.57684187, 6.57702352, 6.57720589,
			6.57739216, 6.5775841, 6.57777715, 6.57796133, 6.57816394,
			6.57836166, 6.57855691, 6.57876048, 6.57896451, 6.57916346,
			6.5793463, 6.57954928, 6.57974385, 6.5799401, 6.58014458,
			6.58033574, 6.58052359, 6.58071306, 6.58090361, 6.58110409,
			6.58129412, 6.58148648, 6.58168131, 6.581876, 6.58204678,
			6.58223886, 6.58244233, 6.58263516, 6.58282024, 6.5829909,
			6.58315421, 6.58330363, 6.58342711, 6.58355641, 6.58369265,
			6.58378644, 6.58389641, 6.58403336, 6.58419355, 6.58436702,
			6.58453773, 6.58471423, 6.58490136, 6.58507718, 6.58526564,
			6.58544704, 6.58563725, 6.58582724, 6.58601803, 6.58620259,
			6.58638669, 6.58655555, 6.58673626, 6.58691, 6.58709092, 6.5872819,
			6.58747459, 6.58766502, 6.58785445, 6.58803793, 6.58821738,
			6.58839956, 6.58858103, 6.58876452, 6.58894494, 6.5891153,
			6.58928557, 6.58945159, 6.58960779, 6.58976356, 6.58992981,
			6.59008436, 6.59024483, 6.59039324, 6.59053964, 6.59069828,
			6.59085658, 6.59101561, 6.59116872, 6.59132743, 6.59149018,
			6.59163068, 6.59176217, 6.59191713, 6.5920297, 6.59214591,
			6.59227021, 6.59241655, 6.59255206, 6.59267592, 6.59281052,
			6.59294492, 6.59309551, 6.59325376, 6.59340099, 6.59354973,
			6.5936949, 6.59384622, 6.59399688, 6.59414449, 6.59428939,
			6.59443046, 6.59457323, 6.59471164, 6.59485049, 6.59498716,
			6.59513114, 6.59527072, 6.59541734, 6.59556542, 6.59571528,
			6.5958734, 6.59601643, 6.59616169, 6.59630648, 6.59645086,
			6.59658383, 6.59670656, 6.5968245, 6.59694266, 6.59706668,
			6.59717605, 6.59728248, 6.597385, 6.5974987, 6.5976046, 6.59770508,
			6.59781418, 6.59792039, 6.59803081, 6.59812978, 6.59823873,
			6.59835106, 6.59846344, 6.59856366, 6.59865856, 6.598754,
			6.59884889, 6.59894012, 6.59902727, 6.5991211, 6.59920729,
			6.59929308, 6.59938018, 6.59944469, 6.59951311, 6.59959465,
			6.59967808, 6.59975087, 6.59982619, 6.59990955, 6.59999614,
			6.60008266, 6.60016963, 6.60025742, 6.60035299, 6.60043149,
			6.60052668, 6.60062238, 6.60071759, 6.60082087, 6.60092027,
			6.60101793, 6.60112499, 6.6012455, 6.60136117, 6.60148278,
			6.60160257, 6.60172841, 6.60188221, 6.60199683, 6.60212218,
			6.60224644, 6.60237426, 6.60250394, 6.60261985, 6.60272923,
			6.60281089, 6.60292302, 6.60294687, 6.60294839, 6.60290983,
			6.60284283, 6.60275531, 6.60268694, 6.60263652, 6.60261754,
			6.60260618, 6.60263924, 6.60271863, 6.60282125, 6.60294776,
			6.60309512, 6.6032614, 6.60344377, 6.60362266, 6.60380563,
			6.60397202, 6.60410705, 6.60421806, 6.60431384, 6.60441784,
			6.60450331, 6.6046281, 6.60476159, 6.60491774, 6.60506859,
			6.60521839, 6.60535857, 6.60550803, 6.6056677, 6.60582613,
			6.60598279, 6.60614358, 6.60630242, 6.60647199, 6.60660519,
			6.60677127, 6.60693603, 6.60710082, 6.60725349, 6.6074423,
			6.60759199, 6.60774429, 6.60786225, 6.60799792, 6.60812639,
			6.60823721, 6.60833254, 6.60843205, 6.60851595, 6.60858758,
			6.60860593, 6.60862566, 6.60863401, 6.60863132, 6.60864134,
			6.6086516, 6.60865168, 6.60865462, 6.60865937, 6.60865579,
			6.60865642, 6.60865779, 6.60865858, 6.60865808, 6.60865709,
			6.60865671, 6.60865424, 6.60865524, 6.60865522, 6.60865499,
			6.60865571, 6.60865536, 6.60865496, 6.60865469, 6.60865469,
			6.6086546, 6.60865446, 6.60865501, 6.60868711, 6.60872215,
			6.60878278, 6.60885348, 6.60896099, 6.60905753, 6.6091563,
			6.60925328, 6.60932182, 6.60938517, 6.60942719, 6.60942356,
			6.60942068, 6.60941421, 6.60941604, 6.60940217, 6.6093708,
			6.60935279, 6.60932131, 6.6093002, 6.60928623, 6.60930467,
			6.60932021, 6.60937429, 6.6094092, 6.60944234, 6.60948518,
			6.60950338, 6.60949727, 6.60949313, 6.60948761, 6.60948622,
			6.60948402, };

}